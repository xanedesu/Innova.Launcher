<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:Innova.Launcher.UI"
                    xmlns:controls="clr-namespace:Innova.Launcher.UI.Controls">
  <Style x:Key="InnovaComboBoxFocusVisual">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Rectangle SnapsToDevicePixels="true" Stroke="{DynamicResource FocusBrush}" RadiusX="4" RadiusY="4"
                     Margin="-3" StrokeThickness="1"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="InnovaEditableTextBoxStyle" TargetType="{x:Type TextBox}">
    <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
    <Setter Property="UIElement.AllowDrop" Value="true"/>
    <Setter Property="FrameworkElement.MinWidth" Value="0"/>
    <Setter Property="FrameworkElement.MinHeight" Value="0"/>
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
    <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TextBox}">
          <Grid Background="{TemplateBinding Control.Background}">
            <Grid Margin="{TemplateBinding Control.Padding}">
              <ScrollViewer x:Name="PART_ContentHost" Margin="0" VerticalAlignment="Stretch"
                            Foreground="{TemplateBinding Control.Foreground}" BorderThickness="0" IsTabStop="False"
                            Focusable="False" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"
                            Background="{x:Null}"/>
            </Grid>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="InnovaComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
    <Setter Property="Control.Foreground"
            Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}"/>
    <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
    <Setter Property="Control.IsTabStop" Value="false"/>
    <Setter Property="UIElement.Focusable" Value="false"/>
    <Setter Property="ButtonBase.ClickMode" Value="Press"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Grid>
            <Border x:Name="ToggleTemplateRoot" Background="{TemplateBinding Control.Background}"
                    BorderBrush="{TemplateBinding Control.BorderBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}">
              <Border x:Name="splitBorder" Margin="0" HorizontalAlignment="Right" VerticalAlignment="Center"
                      BorderBrush="Transparent" BorderThickness="0">
                <Path x:Name="arrow" Width="8" Height="8" Margin="0" Stretch="Uniform" HorizontalAlignment="Right"
                      VerticalAlignment="Center" Data="M 7,10 L 12,15 17,10 7,10 Z"
                      Fill="{TemplateBinding Control.Foreground}"/>
              </Border>
            </Border>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <ControlTemplate x:Key="InnovaComboBoxItemTemplate" TargetType="{x:Type ComboBoxItem}">
    <Grid x:Name="GridWrapper">
      <ContentControl HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                      HorizontalContentAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                      VerticalContentAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                      Content="{TemplateBinding ContentControl.Content}"
                      ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                      ContentTemplateSelector="{TemplateBinding ContentControl.ContentTemplateSelector}"
                      Focusable="False" Foreground="{TemplateBinding Control.Foreground}"
                      Margin="{TemplateBinding Control.Padding}"
                      SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="True">
        <Setter Value="{DynamicResource LinkDefaultBrush}" Property="Control.Foreground"/>
      </Trigger>
      <Trigger Property="ListBoxItem.IsSelected" Value="True">
        <Setter Value="{DynamicResource LinkDefaultBrush}" Property="Control.Foreground"/>
      </Trigger>
      <Trigger Property="UIElement.IsEnabled" Value="False">
        <Setter TargetName="GridWrapper" Property="UIElement.Opacity" Value="0.56"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="InnovaComboBoxItemStyle" TargetType="{x:Type ComboBoxItem}">
    <Setter Property="UIElement.SnapsToDevicePixels" Value="True"/>
    <Setter Property="Control.Padding" Value="0 3"/>
    <Setter Property="Control.HorizontalContentAlignment"
            Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
    <Setter Property="Control.VerticalContentAlignment"
            Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
    <Setter Property="Control.Background" Value="Transparent"/>
    <Setter Property="Control.BorderBrush" Value="Transparent"/>
    <Setter Property="Control.BorderThickness" Value="0"/>
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource InverseTextBrush}"/>
    <Setter Property="Control.Template" Value="{StaticResource InnovaComboBoxItemTemplate}"/>
  </Style>
  <ControlTemplate x:Key="InnovaComboBoxTemplate" TargetType="{x:Type ComboBox}">
    <Grid x:Name="templateRoot" Background="{TemplateBinding Control.Background}" SnapsToDevicePixels="True">
      <Grid>
        <Grid.RowDefinitions>
          <RowDefinition Height="Auto"/>
          <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        <TextBlock Grid.Row="0" Foreground="{TemplateBinding Control.Foreground}" Focusable="False" FontSize="13"
                   Text="{Binding Path=(local:CaptionAssist.Caption), RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}}"/>
        <Grid x:Name="InnerRoot" Row="1" Margin="0 5 0 0">
          <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*"/>
            <ColumnDefinition Width="0" MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"/>
          </Grid.ColumnDefinitions>
          <Border x:Name="FocusBorder" Grid.ColumnSpan="2" Background="Transparent"
                  BorderBrush="{DynamicResource FocusBrush}" BorderThickness="1" CornerRadius="3" Margin="-2"
                  Visibility="Hidden"/>
          <ToggleButton x:Name="toggleButton" Grid.ColumnSpan="2" Background="{TemplateBinding Control.Background}"
                        Foreground="{TemplateBinding Control.Foreground}"
                        BorderBrush="{TemplateBinding Control.BorderBrush}"
                        BorderThickness="{TemplateBinding Control.BorderThickness}"
                        Style="{StaticResource InnovaComboBoxToggleButton}"
                        IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
          <Grid HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                Margin="{TemplateBinding Control.Padding}"
                SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                UseLayoutRounding="{TemplateBinding FrameworkElement.UseLayoutRounding}">
            <Grid x:Name="InputRoot" HorizontalAlignment="Left">
              <ContentPresenter x:Name="contentPresenter" Margin="0 4" Content="{TemplateBinding ComboBox.SelectionBoxItem}"
                                ContentStringFormat="{TemplateBinding ComboBox.SelectionBoxItemStringFormat}"
                                ContentTemplate="{TemplateBinding ComboBox.SelectionBoxItemTemplate}"
                                ContentTemplateSelector="{TemplateBinding ItemsControl.ItemTemplateSelector}"
                                IsHitTestVisible="False"/>
              <TextBox x:Name="PART_EditableTextBox" HorizontalAlignment="Left" HorizontalContentAlignment="Stretch"
                       Foreground="{TemplateBinding Control.Foreground}"
                       Style="{StaticResource InnovaEditableTextBoxStyle}" Visibility="Collapsed"
                       IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}"
                       CaretBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=BorderBrush}"/>
            </Grid>
          </Grid>
          <controls:Underline x:Name="Underline" Grid.ColumnSpan="2"
                              IsActive="{Binding ElementName=PART_EditableTextBox, Path=IsKeyboardFocused}"/>
          <Popup x:Name="PART_Popup" AllowsTransparency="True" Focusable="False" Placement="Bottom"
                 PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
                 IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}">
            <Grid MinWidth="{Binding ActualWidth, RelativeSource={RelativeSource TemplatedParent}}"
                  MaxHeight="{Binding MaxDropDownHeight, RelativeSource={RelativeSource TemplatedParent}}">
              <Border x:Name="PopupBorder" Height="Auto" CornerRadius="5" HorizontalAlignment="Stretch"
                      Background="{DynamicResource InverseBackgroundBrush}"
                      TextElement.Foreground="{DynamicResource InverseTextBrush}" BorderBrush="Transparent"
                      BorderThickness="0" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}">
                <ScrollViewer Margin="5 10" BorderThickness="0">
                  <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained"/>
                </ScrollViewer>
              </Border>
            </Grid>
          </Popup>
        </Grid>
      </Grid>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="UIElement.IsKeyboardFocused" Value="true">
        <Setter TargetName="Underline" Property="controls:Underline.IsActive" Value="True"/>
      </Trigger>
      <Trigger Property="Validation.HasError" Value="true">
        <Setter Value="{DynamicResource ErrorBrush}" Property="Control.BorderBrush"/>
        <Setter TargetName="Underline" Property="controls:Underline.IsError" Value="True"/>
      </Trigger>
      <Trigger Property="ComboBox.IsDropDownOpen" Value="True">
        <Setter TargetName="Underline" Property="UIElement.Visibility" Value="Hidden"/>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="UIElement.IsMouseOver" Value="true"/>
          <Condition Property="Validation.HasError" Value="true"/>
        </MultiTrigger.Conditions>
        <Setter Value="{DynamicResource ErrorBrush}" Property="Control.BorderBrush"/>
        <Setter TargetName="Underline" Property="controls:Underline.IsError" Value="True"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="UIElement.IsMouseOver" Value="true"/>
          <Condition Property="Validation.HasError" Value="false"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="Underline" Property="controls:Underline.IsActive" Value="True"/>
      </MultiTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="InnovaComboBox" TargetType="{x:Type ComboBox}">
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="Control.Background" Value="Transparent"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource TextActiveBrush}"/>
    <Setter Property="Control.BorderThickness" Value="0"/>
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
    <Setter Property="Control.Padding" Value="0"/>
    <Setter Property="Control.FontSize" Value="13"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Top"/>
    <Setter Property="Control.HorizontalContentAlignment" Value="Stretch"/>
    <Setter Property="FrameworkElement.HorizontalAlignment" Value="Stretch"/>
    <Setter Property="FrameworkElement.VerticalAlignment" Value="Center"/>
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="ScrollViewer.CanContentScroll" Value="False"/>
    <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
    <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
    <Setter Property="Validation.ErrorTemplate" Value="{StaticResource InnovaValidationErrorTemplate}"/>
    <Setter Property="ItemsControl.ItemContainerStyle" Value="{StaticResource InnovaComboBoxItemStyle}"/>
    <Setter Property="Control.Template" Value="{StaticResource InnovaComboBoxTemplate}"/>
    <Style.Triggers>
      <Trigger Property="UIElement.IsKeyboardFocused" Value="true">
        <Setter Property="Control.BorderBrush" Value="{DynamicResource TextActiveBrush}"/>
      </Trigger>
      <Trigger Property="UIElement.IsKeyboardFocusWithin" Value="true">
        <Setter Property="Control.BorderBrush" Value="{DynamicResource TextActiveBrush}"/>
      </Trigger>
      <Trigger Property="ComboBox.IsEditable" Value="true">
        <Setter Property="Control.IsTabStop" Value="false"/>
      </Trigger>
    </Style.Triggers>
  </Style>
</ResourceDictionary>